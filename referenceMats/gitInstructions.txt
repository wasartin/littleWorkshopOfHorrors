GIT and HOW TO resolve stuff


Errors----------------------------------------------

1. src refspec master does not match any when pushing commits in git
	-You forgot to commit your changes before pushing.

New project-----------------------------------------

1. Go to directory location
2. git init
     a. make a .gitignore
		-https://github.com/github/gitignore
3. git add . //. means all
4. git commit -m "..."

Go to github
1. click new repo
2. git remote add origin <Input url that Github make>
	a. Will look something like https://github.com/userName/repoName.git
4. git push origin master


Branching-------------------------------------------

Make a new branch
	$git branch <name of new branch>

List branches
	$git branch -a
	
Switch to specific branch
	$git checkout <name of branch>
	
Change name of branch
	if you are currently on the branch
		$git branch -m <new name>
	if you are one a diff branch
		$git branch -m <old name> <new name>
	Delete old name on remote and push new name from local
		$git push origin :<old name> <new name>
	Reset the upstream branch for the new name of local
		$git checkout <old name>
		$git push origin -u <name name>

Merge_Conflicts------------------------------------
This happens when merge branches have competing commits

1.You want a <branch-1> to have the <branch-2>'s code.
	
		$git checkout <branch-1> 	#The one you are on#
		$git merge <branch-2>		#The one you are trying to add#
		CONFLICT (content): Merge conflict in <files-that-differ>
		Automatic merge failed: fix conflicts and then commit the result
		
		#Now go to your file, and you will see this.
			<<<<<<< HEAD
				// This is the code on <branch-1>
			=======
				// This is the code on <branch-2>
			>>>>>>> javadoc
		#Pick the code you want, delete the other, and remove the 
			# '<<<', '===', '>>>'
		#add, commit, push. Done

Merge_Repos----------------------------------------
When you want to merge two repos, and keep the history.

1. You want <project-parent> to have <project-child> under it.

	$cd <path-to-'project-parent'>
	$git remote add <label-you-make-for-'project-child'> <path/to/project-child>
	$git fetch <label>
	$git merge --allow-unrelated-histories <label>/master
	#Fix any conflicts
	$git add .
	$git commit -m "<a-great-commit-message>"
	$git push
	
Remove Files in Git Repo----------------------------------------
Cause this always happens to people
	git rm <file-name> --cached
